J'ai cr√©√© un script bash complet et professionnel qui r√©pond √† toutes vos exigences. Voici ce que j'ai inclus :

## üéØ **Fonctionnalit√©s principales**

1. **D√©tection automatique de l'OS** - Windows, Linux, macOS
2. **Installation multi-plateforme** des outils requis :
   - Git
   - Node.js & npm
   - Python 3
   - Cypress
   - Shell (bash/sh)

3. **Gestionnaires de paquets adapt√©s** :
   - **Windows** : Chocolatey
   - **Linux** : apt-get, yum, ou pacman (selon la distribution)
   - **macOS** : Homebrew

## üîç **V√©rifications et logging**

- V√©rification compl√®te de l'installation de chaque outil
- Fichier de log d√©taill√© avec timestamp
- Messages color√©s pour une meilleure lisibilit√©
- Gestion robuste des erreurs avec `set -euo pipefail`

## üõ†Ô∏è **Bonnes pratiques appliqu√©es**

- **Clean Code** : fonctions modulaires, nommage explicite
- **Documentation compl√®te** : chaque ligne comment√©e en anglais
- **Gestion d'erreurs** : trap pour les interruptions, codes de retour
- **S√©curit√©** : v√©rification des commandes avant ex√©cution
- **Portabilit√©** : compatible avec diff√©rentes distributions Linux

## üìã **En-t√™te complet**

- Cr√©ateur : Khalid HAFID-MEDHEB
- Date de cr√©ation et mise √† jour
- Description d√©taill√©e du script

Le script g√©n√®re automatiquement un fichier de log avec timestamp et v√©rifie que tous les outils sont correctement install√©s avant de terminer. Vous pouvez l'ex√©cuter directement avec `bash install_kallitests.sh` sur n'importe quel syst√®me.

Voici la **conversion compl√®te** du script `kallitests_installer.sh` en **PowerShell** (`kallitests_installer.ps1`) :

---

### ‚úÖ **Fichier PowerShell `.ps1`**

```powershell
# =============================================================================
# Cross-Platform Kallitests Development Environment Installer (PowerShell)
# =============================================================================
# Author: Khalid HAFID-MEDHEB
# Created: June 04, 2025
# Last Updated: June 04, 2025
# =============================================================================

param()

# Set log file
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$LogFile = "kallitests_install_$timestamp.log"

# Output formatting colors
function Write-Info    { Write-Host "[INFO] $args"    -ForegroundColor Cyan    | Tee-Object -FilePath $LogFile -Append }
function Write-Success { Write-Host "[SUCCESS] $args" -ForegroundColor Green   | Tee-Object -FilePath $LogFile -Append }
function Write-Warn    { Write-Host "[WARNING] $args" -ForegroundColor Yellow  | Tee-Object -FilePath $LogFile -Append }
function Write-Error   { Write-Host "[ERROR] $args"   -ForegroundColor Red     | Tee-Object -FilePath $LogFile -Append }

# Run command with logging
function Run-Command {
    param (
        [string]$Command,
        [string]$Description
    )
    Write-Info "Executing: $Description"
    Add-Content $LogFile "Command: $Command"
    try {
        Invoke-Expression $Command | Tee-Object -FilePath $LogFile -Append
        Write-Success "$Description completed successfully"
    } catch {
        Write-Error "$Description failed: $_"
    }
}

# Check if command exists
function Command-Exists {
    param ([string]$cmd)
    return (Get-Command $cmd -ErrorAction SilentlyContinue) -ne $null
}

# Install dependencies on Windows using Chocolatey
function Install-Windows {
    Write-Info "Installing packages for Windows using Chocolatey"

    if (-not (Command-Exists "choco")) {
        Write-Info "Installing Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    }

    Run-Command "choco upgrade chocolatey" "Upgrading Chocolatey"
    Run-Command "choco install git nodejs-lts python3 -y" "Installing Git, Node.js and Python"
    Run-Command "npm install -g cypress" "Installing Cypress globally"
}

# Verify tool installation
function Verify-Tool {
    param (
        [string]$Tool,
        [string]$VersionFlag = "--version"
    )
    if (Command-Exists $Tool) {
        try {
            $version = & $Tool $VersionFlag
            Write-Success "$Tool is installed: $version"
            Add-Content $LogFile "$Tool: $version"
        } catch {
            Write-Error "$Tool is installed but version retrieval failed"
        }
    } else {
        Write-Error "$Tool is not installed or not in PATH"
    }
}

# Verify all installations
function Verify-Installations {
    Write-Info "Verifying installations..."

    Verify-Tool "git"
    Verify-Tool "node"
    Verify-Tool "npm"

    if (Command-Exists "python") {
        Verify-Tool "python"
    } elseif (Command-Exists "python3") {
        Verify-Tool "python3"
    } else {
        Write-Error "Python is not installed"
    }

    try {
        $cypressVersion = npm list -g cypress | Select-String "cypress"
        if ($cypressVersion) {
            Write-Success "Cypress is installed: $cypressVersion"
            Add-Content $LogFile "Cypress: $cypressVersion"
        } else {
            throw "Cypress not found"
        }
    } catch {
        Write-Error "Cypress is not installed globally"
    }

    if (Command-Exists "bash") {
        Verify-Tool "bash"
    } else {
        Write-Warn "bash shell is not available"
    }
}

# Main function
function Main {
    Write-Host "=============================================================================="
    Write-Host "Kallitests Development Environment Installation - $(Get-Date)"
    Write-Host "=============================================================================="
    Write-Info "Log file: $LogFile"

    if ($IsWindows) {
        Install-Windows
    } else {
        Write-Error "This PowerShell installer currently supports only Windows"
        return
    }

    Verify-Installations

    Write-Info "Installation Summary:"
    Write-Info "- Log file saved as: $LogFile"
    Write-Info "- Restart your terminal if needed"
    Write-Info "- Run 'cypress --version' to verify Cypress installation"

    Write-Host "=============================================================================="
    Write-Host "Installation completed at $(Get-Date)"
    Write-Host "=============================================================================="
}

# Run script
try {
    Main
} catch {
    Write-Error "Installation interrupted: $_"
    exit 1
}
```

---

### ‚úÖ Instructions d'ex√©cution sous Windows :

1. Ouvre PowerShell **en mode administrateur**.
2. Navigue dans le r√©pertoire o√π se trouve le fichier :

   ```powershell
   cd "C:\chemin\vers\le\script"
   ```
3. Ex√©cute le script :

   ```powershell
   .\kallitests_installer.ps1
   ```
4. Si tu re√ßois une erreur li√©e √† l‚Äôex√©cution de script, lance d‚Äôabord :

   ```powershell
   Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
   ```

Perfect ! J'ai mis √† jour le script PowerShell pour inclure la logique d'upgrade/installation intelligente. Voici les principales am√©liorations apport√©es :

## üîÑ **Nouvelles fonctionnalit√©s d'upgrade**

### **Fonctions ajout√©es :**

1. **`Is-ChocoPackageInstalled`** - V√©rifie si un package Chocolatey est d√©j√† install√©
2. **`Install-Or-Upgrade-ChocoPackage`** - Installe ou upgrade un package Chocolatey selon son √©tat
3. **`Is-NpmPackageInstalled`** - V√©rifie si un package npm est install√© globalement
4. **`Install-Or-Upgrade-NpmPackage`** - Installe ou upgrade un package npm global

### **Logique intelligente :**

- ‚úÖ **Git** : Installe ou upgrade (inclut Git Bash automatiquement)
- ‚úÖ **Node.js LTS** : Installe ou upgrade vers la derni√®re version LTS
- ‚úÖ **npm** : Inclus avec Node.js, mis √† jour automatiquement
- ‚úÖ **Python 3** : Installe ou upgrade vers la derni√®re version
- ‚úÖ **Cypress** : Installe ou upgrade via npm global

## üõ†Ô∏è **Am√©liorations techniques**

1. **Gestion intelligente des PATH** - Rafra√Æchissement automatique des variables d'environnement
2. **V√©rification robuste** - Contr√¥le de l'√©tat avant/apr√®s installation
3. **Gestion des erreurs** - Meilleure handling des cas d'√©chec
4. **Logging am√©lior√©** - Informations d√©taill√©es sur les op√©rations d'upgrade

## üìã **Comportement du script**

- **Premi√®re ex√©cution** ‚Üí Installe tous les outils manquants
- **Ex√©cutions suivantes** ‚Üí Upgrade les outils existants vers leurs derni√®res versions
- **V√©rification finale** ‚Üí Confirme que tous les outils sont pr√©sents et fonctionnels

Le script d√©tecte automatiquement l'√©tat de chaque outil et applique l'action appropri√©e (installation ou upgrade), garantissant que vous avez toujours les derni√®res versions disponibles !
